<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>学习卡片</title>
    <link rel="stylesheet" href="/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="content">
        <h1>记吧</h1>
        
        <div id="my-cards" class="card-section">
            <h2>我的学习卡片</h2>
            <div class="card-container">
                <% userCards.forEach(function(card) { %>
                    <div class="md-card">
                        <a href="/card/<%= card.name %>" class="md-card-link">
                            <h2 class="md-card-title"><%= card.name %></h2>
                        </a>
                        <div class="card-buttons">
                            <button class="memory-btn" onclick="startMemory('<%= card.name %>', 'ordered')">顺序记忆</button>
                            <button class="memory-btn" onclick="startMemory('<%= card.name %>', 'random')">随机记忆</button>
                        </div>
                    </div>
                <% }) %>
            </div>
        </div>

        <div id="public-cards" class="card-section" style="display: none;">
            <h2>公共学习卡片</h2>
            <div class="card-container">
                <% publicCards.forEach(function(card) { %>
                    <div class="md-card">
                        <a href="/card/<%= card.name %>" class="md-card-link">
                            <h2 class="md-card-title"><%= card.name %></h2>
                        </a>
                        <div class="card-buttons">
                            <button class="memory-btn" onclick="startMemory('<%= card.name %>', 'ordered')">顺序记忆</button>
                            <button class="memory-btn" onclick="startMemory('<%= card.name %>', 'random')">随机记忆</button>
                        </div>
                    </div>
                <% }) %>
            </div>
        </div>

        <div id="profile" class="card-section" style="display: none;">
            <h2>个人资料</h2>
            <p>用户名: <%= username %></p>
            <p>邀请码: <%= inviteCode %></p>
            <button id="logout-btn">退出</button>
            <% if (role === 'admin') { %>
                <button onclick="window.location.href='/admin'" class="admin-btn">管理员功能</button>
            <% } %>
            <button id="upload-btn" class="upload-btn">上传单词卡</button>
            <button id="leaderboard-btn" class="leaderboard-btn">学习排行榜</button>
        </div>
    </div>

    <nav class="bottom-menu">
        <button class="menu-item active" onclick="showSection('my-cards')">
            <i class="fas fa-book"></i>
            <span>我的</span>
        </button>
        <button class="menu-item" onclick="showSection('public-cards')">
            <i class="fas fa-globe"></i>
            <span>公共</span>
        </button>
        <button class="menu-item" onclick="showSection('profile')">
            <i class="fas fa-user"></i>
            <span>我</span>
        </button>
    </nav>

    <!-- 学习排行榜的对话框 -->
    <div id="leaderboard-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <span id="leaderboard-close-btn" class="close">&times;</span>
            <h2>学习排行榜</h2>
            <table id="leaderboard">
                <thead>
                    <tr>
                        <th>用户名</th>
                        <th>学习的词汇数量</th>
                    </tr>
                </thead>
                <tbody id="leaderboard-body">
                    <!-- 排行榜数据将通过 JavaScript 动态填充 -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- 上传文件和手动输入的对话框 -->
    <div id="upload-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <span id="close-btn" class="close">&times;</span>
            <h2>上传或手动输入学习卡片</h2>

            <!-- 上传txt文件表单 -->
            <form id="upload-form" enctype="multipart/form-data">
                <h3>上传文件</h3>
                <label for="file">选择TXT文件上传:</label>
                <input type="file" id="file" name="file" accept=".txt" required>
                <br>
                <label>
                    <input type="checkbox" name="isPublic" value="true"> 公开此学习卡片
                </label>
                <button type="submit">上传文件</button>
            </form>

            <hr>

            <!-- 手动输入表单 -->
            <form id="manual-input-form">
                <h3>手动输入</h3>
                <label for="customFileName">文件名（必填）：</label>
                <input type="text" id="customFileName" name="customFileName" placeholder="输入文件名" required>
                <br><br>

                <label>单词和定义:</label>
                <div id="manual-input-container">
                    <div class="input-pair">
                        <input type="text" name="word[]" placeholder="单词1" required>
                        <input type="text" name="definition[]" placeholder="定义1" required>
                        <button type="button" class="delete-input-btn">删除</button>
                    </div>
                </div>
                <button type="button" id="add-input-btn">+ 添加更多</button>
                <br>
                <label>
                    <input type="checkbox" name="isPublic" value="true"> 公开此学习卡片
                </label>
                <button type="submit">提交手动输入</button>
            </form>
        </div>
    </div>

    <script>
        // 处理底部菜单切换
        function showSection(sectionId) {
            const sections = document.querySelectorAll('.card-section');
            sections.forEach(section => {
                section.style.display = 'none';
            });
            document.getElementById(sectionId).style.display = 'block';

            const menuItems = document.querySelectorAll('.menu-item');
            menuItems.forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
        }

        // 处理退出功能
        document.getElementById('logout-btn').addEventListener('click', () => {
            window.location.href = '/logout';
        });

        // 处理上传和输入单词卡的弹窗逻辑
        const uploadBtn = document.getElementById('upload-btn');
        const uploadModal = document.getElementById('upload-modal');
        const closeBtn = document.getElementById('close-btn');
        const manualInputContainer = document.getElementById('manual-input-container');

        uploadBtn.addEventListener('click', () => {
            uploadModal.style.display = 'flex';
        });

        closeBtn.addEventListener('click', () => {
            uploadModal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === uploadModal) {
                uploadModal.style.display = 'none';
            }
        });

        // 动态添加新的单词和定义输入框
        const addInputBtn = document.getElementById('add-input-btn');

        addInputBtn.addEventListener('click', () => {
            const inputPair = document.createElement('div');
            inputPair.className = 'input-pair';

            const wordInput = document.createElement('input');
            wordInput.setAttribute('type', 'text');
            wordInput.setAttribute('name', 'word[]');
            wordInput.setAttribute('placeholder', `单词 ${manualInputContainer.children.length + 1}`);
            wordInput.setAttribute('required', 'required');

            const definitionInput = document.createElement('input');
            definitionInput.setAttribute('type', 'text');
            definitionInput.setAttribute('name', 'definition[]');
            definitionInput.setAttribute('placeholder', `定义 ${manualInputContainer.children.length + 1}`);
            definitionInput.setAttribute('required', 'required');

            const deleteBtn = document.createElement('button');
            deleteBtn.setAttribute('type', 'button');
            deleteBtn.classList.add('delete-input-btn');
            deleteBtn.textContent = '删除';
            deleteBtn.addEventListener('click', () => {
                manualInputContainer.removeChild(inputPair);
            });

            inputPair.appendChild(wordInput);
            inputPair.appendChild(definitionInput);
            inputPair.appendChild(deleteBtn);

            manualInputContainer.appendChild(inputPair);
        });

        // 处理文件上传
        const uploadForm = document.getElementById('upload-form');
        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);

            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('文件上传成功！');
                    uploadModal.style.display = 'none';
                    location.reload();
                } else {
                    alert('上传失败：' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('上传过程中发生错误');
            });
        });

        // 处理手动输入
        const manualInputForm = document.getElementById('manual-input-form');
        manualInputForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);

            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('手动输入成功保存！');
                    uploadModal.style.display = 'none';
                    location.reload();
                } else {
                    alert('保存失败：' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('保存过程中发生错误');
            });
        });

        // 启动记忆模式函数
        function startMemory(cardName, mode) {
            if (mode === 'ordered') {
                window.location.href = `/card/${cardName}`;
            } else {
                window.location.href = `/card/${cardName}?random=true`;
            }
        }

        // 动态加载学习排行榜数据
        function loadLeaderboard() {
            fetch('/api/leaderboard')
                .then(response => response.json())
                .then(data => {
                    const leaderboardBody = document.getElementById('leaderboard-body');
                    leaderboardBody.innerHTML = '';

                    data.forEach(user => {
                        const row = document.createElement('tr');
                        const usernameCell = document.createElement('td');
                        const scoreCell = document.createElement('td');

                        usernameCell.textContent = user.username;
                        scoreCell.textContent = user.totalWords;

                        row.appendChild(usernameCell);
                        row.appendChild(scoreCell);

                        leaderboardBody.appendChild(row);
                    });
                })
                .catch(error => console.error('加载排行榜失败:', error));
        }

        // 显示学习排行榜
        const leaderboardBtn = document.getElementById('leaderboard-btn');
        const leaderboardModal = document.getElementById('leaderboard-modal');
        const leaderboardCloseBtn = document.getElementById('leaderboard-close-btn');

        leaderboardBtn.addEventListener('click', () => {
            leaderboardModal.style.display = 'flex';
            loadLeaderboard();
        });

        leaderboardCloseBtn.addEventListener('click', () => {
            leaderboardModal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === leaderboardModal) {
                leaderboardModal.style.display = 'none';
            }
        });
    </script>
</body>
</html>